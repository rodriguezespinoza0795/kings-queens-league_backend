scalar DateTime

# Queries and Mutations
type Query {
  clubCategories(
    skip: Int
    take: Int
    where: ClubCategoryWhereInput
  ): [ClubCategory]!
  clubCategory(id: ID!): ClubCategory
  clubs(skip: Int, take: Int, where: ClubWhereInput): [Club]!
  club(id: ID!): Club
}

type Mutation {
  createClubCategory(data: ClubCategoryInput!): ClubCategory!
  deleteClubCategory(id: ID!): ClubCategory!
  updateClubCategory(id: ID!, data: ClubCategoryInput!): ClubCategory!
  createClub(data: ClubInput!): Club!
  deleteClub(id: ID!): Club!
  updateClub(id: ID!, data: ClubInput!): Club!
}

# Interfaces
interface BaseModel {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  isActive: Int!
}

# Types
type ClubCategory implements BaseModel {
  id: ID!
  name: String!
  image: String!
  createdAt: DateTime!
  updatedAt: DateTime
  isActive: Int!
}

type Club implements BaseModel {
  id: ID!
  name: String!
  image: String!
  clubCategoryId: Int!
  clubCategory: ClubCategory!
  createdAt: DateTime!
  updatedAt: DateTime
  isActive: Int!
}

# Inputs
input StringFilterInput {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: String
}

input boolFilterInput {
  equals: Boolean
}

# Create
input ClubCategoryInput {
  name: String!
  image: String!
}

input ClubInput {
  name: String!
  image: String!
  clubCategoryId: Int!
}

# Search
input ClubCategoryWhereInput {
  name: StringFilterInput
  isActive: boolFilterInput
}

input ClubWhereInput {
  name: StringFilterInput
  isActive: boolFilterInput
}
