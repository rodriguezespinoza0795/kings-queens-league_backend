scalar DateTime

# Queries and Mutations
type Query {
  clubCategories(skip: Int, take: Int, where: NameWhereInput): [ClubCategory]!
  clubCategory(id: ID!): ClubCategory
  clubs(skip: Int, take: Int, where: ClubWhereInput): [Club]!
  club(id: ID!): Club
  positions(skip: Int, take: Int, where: NameWhereInput): [Position]!
  position(id: ID!): Position
  playerTypes(skip: Int, take: Int, where: NameWhereInput): [PlayerType]!
  playerType(id: ID!): PlayerType
  players(skip: Int, take: Int, where: PlayerWhereInput): [Player]!
  player(id: ID!): Player
  tournaments(skip: Int, take: Int, where: NameWhereInput): [Tournament]!
  tournament(id: ID!): Tournament
  tournamentGroups(
    skip: Int
    take: Int
    where: TournamentGroupWhereInput
  ): [TournamentGroup]!
  tournamentGroup(id: ID!): TournamentGroup
  tournamentRounds(
    skip: Int
    take: Int
    where: TournamentRoundWhereInput
  ): [TournamentRound]!
  tournamentRound(id: ID!): TournamentRound
  playerRounds(
    skip: Int
    take: Int
    where: PlayerRoundWhereInput
  ): [PlayerRound]!
  playerRound(id: ID!): PlayerRound
}

type Mutation {
  createClubCategory(data: ClubCategoryInput!): ClubCategory!
  deleteClubCategory(id: ID!): ClubCategory!
  updateClubCategory(id: ID!, data: ClubCategoryInput!): ClubCategory!
  createClub(data: ClubInput!): Club!
  deleteClub(id: ID!): Club!
  updateClub(id: ID!, data: ClubInput!): Club!
  createPosition(data: PositionInput!): Club!
  deletePosition(id: ID!): Position!
  updatePosition(id: ID!, data: PositionInput!): Position!
  createPlayerType(data: NameInput!): PlayerType!
  deletePlayerType(id: ID!): PlayerType!
  updatePlayerType(id: ID!, data: NameInput!): PlayerType!
  createPlayer(data: PlayerInput!): Player!
  deletePlayer(id: ID!): Player!
  updatePlayer(id: ID!, data: PlayerInput!): Player!
  createTournament(data: TournamentInput!): Tournament!
  deleteTournament(id: ID!): Tournament!
  updateTournament(id: ID!, data: TournamentInput!): Tournament!
  createTournamentGroup(data: [TournamentGroupInput]!): Count!
  deleteTournamentGroup(id: ID!): TournamentGroup!
  updateTournamentGroup(where: IdUpdateWhereInput!, data: NameInput!): Count!
  createTournamentRound(data: [TournamentRoundInput]!): Count!
  deleteTournamentRound(id: ID!): TournamentRound!
  updateTournamentRound(
    id: ID!
    data: TournamentRoundUpdateInput!
  ): TournamentRound!
  createPlayerRound(data: [PlayerRoundInput]!): Count!
  deletePlayerRound(id: ID!): PlayerRound!
  updatePlayerRound(id: ID!, data: PlayerRoundUpdateInput!): PlayerRound!
  createUser(data: UserInput!): User!
  signIn(data: UserSignInInput!): AuthenticationResponse!
  validateEmail(data: UserValidateEmailInput!): User!
}

# Interfaces
interface BaseModel {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  isActive: Int!
}

# Types
type User implements BaseModel {
  id: ID!
  username: String!
  image: String
  email: String!
  password: String!
  verified: Int!
  code: Int!
  codeEffectiveDate: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime
  isActive: Int!
}

type ClubCategory implements BaseModel {
  id: ID!
  name: String!
  image: String!
  createdAt: DateTime!
  updatedAt: DateTime
  isActive: Int!
}

type Club implements BaseModel {
  id: ID!
  name: String!
  image: String!
  color: String!
  clubCategoryId: Int!
  clubCategory: ClubCategory!
  createdAt: DateTime!
  updatedAt: DateTime
  isActive: Int!
}

type Position implements BaseModel {
  id: ID!
  name: String!
  description: String!
  createdAt: DateTime!
  updatedAt: DateTime
  isActive: Int!
}

type PlayerType implements BaseModel {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime
  isActive: Int!
}

type Player implements BaseModel {
  id: ID!
  name: String!
  lastName: String
  nickName: String
  positionId: Int!
  position: Position!
  clubId: Int!
  club: Club!
  playerTypeId: Int!
  playerType: PlayerType!
  image: String!
  createdAt: DateTime!
  updatedAt: DateTime
  isActive: Int!
}

type Tournament implements BaseModel {
  id: ID!
  name: String!
  edition: Int!
  clubCategoryId: Int!
  clubCategory: ClubCategory!
  numGroup: Int!
  createdAt: DateTime!
  updatedAt: DateTime
  isActive: Int!
}

type TournamentGroup implements BaseModel {
  id: ID!
  name: String!
  clubId: Int!
  club: Club!
  tournamentId: Int!
  tournament: Tournament!
  createdAt: DateTime!
  updatedAt: DateTime
  isActive: Int!
}

type TournamentRound implements BaseModel {
  id: ID!
  tournamentId: Int!
  tournament: Tournament!
  clubIdHome: Int!
  clubHome: Club!
  clubIdAway: Int!
  clubAway: Club!
  round: Int
  createdAt: DateTime!
  updatedAt: DateTime
  isActive: Int!
}

type PlayerRound implements BaseModel {
  id: ID!
  roundId: Int!
  round: TournamentRound!
  playerId: Int!
  player: Player!
  score: Int!
  createdAt: DateTime!
  updatedAt: DateTime
  isActive: Int!
}

type Count {
  count: Int
}

type AuthenticationResponse {
  token: String!
}

# Inputs
input StringFilterInput {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: String
}

input NumberFilterInput {
  equals: Int
  in: [Int]
  notIn: [Int]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  contains: Int
  startsWith: Int
  endsWith: Int
  not: Int
}

input boolFilterInput {
  equals: Boolean
}

# Create
input UserInput {
  username: String!
  email: String!
  password: String!
}
input UserSignInInput {
  email: String!
  password: String!
}

input UserValidateEmailInput {
  email: String!
  code: Int!
}

input ClubCategoryInput {
  name: String!
  image: String!
}

input ClubInput {
  name: String!
  image: String!
  clubCategoryId: Int!
}

input PositionInput {
  name: String!
  description: String!
}

input PlayerInput {
  name: String!
  lastName: String
  nickName: String
  positionId: Int!
  clubId: Int!
  playerTypeId: Int!
  image: String!
}

input TournamentInput {
  name: String!
  edition: Int!
  clubCategoryId: Int!
  numGroup: Int!
}

input TournamentGroupInput {
  name: String!
  clubId: Int!
  tournamentId: Int!
}

input TournamentRoundInput {
  tournamentId: Int!
  clubIdHome: Int!
  clubIdAway: Int!
  round: Int!
}

input PlayerRoundInput {
  roundId: Int
  playerId: Int
  score: Int
}

input TournamentRoundUpdateInput {
  clubIdHome: Int!
  clubIdAway: Int!
}

input PlayerRoundUpdateInput {
  score: Int!
}

input NameInput {
  name: String!
}

# Search
input NameWhereInput {
  name: StringFilterInput
  isActive: boolFilterInput
}

input ClubWhereInput {
  clubCategoryId: NumberFilterInput
  name: StringFilterInput
  isActive: boolFilterInput
}

input PlayerWhereInput {
  playerTypeId: NumberFilterInput
  positionId: NumberFilterInput
  clubId: NumberFilterInput
  isActive: boolFilterInput
}

input TournamentGroupWhereInput {
  name: StringFilterInput
  tournamentId: NumberFilterInput
  isActive: boolFilterInput
}

input TournamentRoundWhereInput {
  tournamentId: NumberFilterInput
  cliendIdHome: NumberFilterInput
  cliendIdAway: NumberFilterInput
  round: NumberFilterInput
  isActive: boolFilterInput
}

input PlayerRoundWhereInput {
  roundId: NumberFilterInput
  round: TournamentRoundWhereInput
  playerId: NumberFilterInput
  isActive: boolFilterInput
}

input IdUpdateWhereInput {
  id: NumberFilterInput
}
