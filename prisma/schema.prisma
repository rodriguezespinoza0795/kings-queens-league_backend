// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  username          String    @unique
  image             String?
  email             String    @unique
  password          String
  verified          Boolean   @default(false)
  code              Int
  codeEffectiveDate DateTime
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt
  isActive          Boolean   @default(true)
}

model Club_Category {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  image      String
  club       Club[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime?    @updatedAt
  isActive   Boolean      @default(true)
  Tournament Tournament[]
}

model Club {
  id               Int                @id @default(autoincrement())
  name             String
  clubCategory     Club_Category?     @relation(fields: [clubCategoryId], references: [id])
  clubCategoryId   Int?
  image            String
  color            String             @default("ffffff")
  createdAt        DateTime           @default(now())
  updatedAt        DateTime?          @updatedAt
  isActive         Boolean            @default(true)
  Player           Player[]
  Tournament_group Tournament_Group[]
  clubHome         Tournament_Round[] @relation("clubHome")
  clubAway         Tournament_Round[] @relation("clubAway")
}

model Position {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  isActive    Boolean   @default(true)
  Player      Player[]
}

model Player_Type {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  isActive  Boolean   @default(true)
  Player    Player[]
}

model Player {
  id           Int            @id @default(autoincrement())
  name         String
  lastName     String?
  nickName     String?
  positionId   Int
  position     Position?      @relation(fields: [positionId], references: [id])
  clubId       Int
  club         Club           @relation(fields: [clubId], references: [id])
  playerTypeId Int
  playerType   Player_Type    @relation(fields: [playerTypeId], references: [id])
  image        String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime?      @updatedAt
  isActive     Boolean        @default(true)
  Player_Round Player_Round[]
}

model Tournament {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  edition          Int
  clubCategory     Club_Category      @relation(fields: [clubCategoryId], references: [id])
  clubCategoryId   Int
  numGroup         Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime?          @updatedAt
  isActive         Boolean            @default(true)
  Tournament_group Tournament_Group[]
  Tournament_Round Tournament_Round[]
}

model Tournament_Group {
  id           Int         @id @default(autoincrement())
  name         String
  clubId       Int
  club         Club        @relation(fields: [clubId], references: [id])
  tournamentId Int
  tournament   Tournament? @relation(fields: [tournamentId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime?   @updatedAt
  isActive     Boolean     @default(true)
}

model Tournament_Round {
  id           Int            @id @default(autoincrement())
  round        Int
  tournamentId Int
  tournament   Tournament?    @relation(fields: [tournamentId], references: [id])
  clubIdHome   Int
  clubHome     Club           @relation("clubHome", fields: [clubIdHome], references: [id])
  clubIdAway   Int
  clubAway     Club           @relation("clubAway", fields: [clubIdAway], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime?      @updatedAt
  isActive     Boolean        @default(true)
  Player_Round Player_Round[]
  Round_Match  Round_Match?
}

model Round_Match {
  id                Int              @id @default(autoincrement())
  roundId           Int              @unique
  round             Tournament_Round @relation(fields: [roundId], references: [id])
  clubHomeScore     Int
  clubAwayScore     Int
  clubHomeScoreDraw Int?
  clubAwayScoreDraw Int?
  clubHomePoints    Int
  clubAwayPoint     Int
  createdAt         DateTime         @default(now())
  updatedAt         DateTime?        @updatedAt
  isActive          Boolean          @default(true)
}

model Player_Round {
  id        Int              @id @default(autoincrement())
  roundId   Int
  round     Tournament_Round @relation(fields: [roundId], references: [id])
  playerId  Int
  player    Player           @relation(fields: [playerId], references: [id])
  score     Int
  createdAt DateTime         @default(now())
  updatedAt DateTime?        @updatedAt
  isActive  Boolean          @default(true)
}
